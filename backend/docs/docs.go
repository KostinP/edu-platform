// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/telegram": {
            "post": {
                "description": "Авторизация или обновление пользователя через Telegram ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Авторизация через Telegram",
                "parameters": [
                    {
                        "description": "Параметры авторизации через Telegram",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.AuthTelegramRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.AuthTelegramResponseDTO"
                        }
                    },
                    "400": {
                        "description": "invalid request",
                        "schema": {
                            "$ref": "#/definitions/user.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/user.ErrorResponseDTO"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "user.AuthTelegramRequestDTO": {
            "type": "object",
            "required": [
                "role",
                "telegram_id"
            ],
            "properties": {
                "email": {
                    "description": "Email пользователя\nexample: \"user@example.com\"",
                    "type": "string"
                },
                "first_name": {
                    "description": "Имя пользователя\nexample: \"Pavel\"",
                    "type": "string"
                },
                "last_name": {
                    "description": "Фамилия пользователя\nexample: \"Kostin\"",
                    "type": "string"
                },
                "photo_url": {
                    "description": "URL фото пользователя\nexample: \"https://t.me/photo.jpg\"",
                    "type": "string"
                },
                "role": {
                    "description": "Роль пользователя (например, \"student\")\nrequired: true\nexample: \"student\"",
                    "type": "string"
                },
                "subscribe_to_newsletter": {
                    "description": "Подписка на рассылку\nexample: true",
                    "type": "boolean"
                },
                "telegram_id": {
                    "description": "Telegram ID пользователя\nrequired: true\nexample: \"123456789\"",
                    "type": "string"
                },
                "username": {
                    "description": "Логин пользователя в Telegram\nexample: \"kostinp\"",
                    "type": "string"
                }
            }
        },
        "user.AuthTelegramResponseDTO": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Статус ответа\nexample: \"ok\"",
                    "type": "string"
                },
                "user_id": {
                    "description": "ID пользователя\nexample: \"e7bfc72d-34cf-4d92-8de1-f349ae5f0370\"",
                    "type": "string"
                }
            }
        },
        "user.ErrorResponseDTO": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Сообщение об ошибке\nexample: \"invalid request\"",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
